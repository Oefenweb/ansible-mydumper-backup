#!/usr/bin/env python

# -*- coding: utf-8 -*-

# {{ ansible_managed }}

import json
import os
import subprocess
import sys


databases = json.loads('{{ mydumper_backup_restore_databases | to_json }}')
for database in databases:
  command = []
  command.append(os.path.join('{{ mydumper_backup_myloader_path }}', 'myloader'))
  {% if mydumper_backup_host is defined -%}
  command.extend(['--host', '{{ mydumper_backup_host }}'])
  {% endif -%}
  {% if mydumper_backup_user is defined -%}
  command.extend(['--user', '{{ mydumper_backup_user }}'])
  {% endif -%}
  {% if mydumper_backup_password is defined -%}
  command.extend(['--password', '{{ mydumper_backup_password }}'])
  {% endif -%}
  command.extend(['--database', database])
  {% if mydumper_backup_threads is defined -%}
  command.extend(['--threads', {{ mydumper_backup_threads | int }}])
  {% endif -%}
  {% if mydumper_backup_overwrite_tables is defined and mydumper_backup_overwrite_tables | bool == true -%}
  command.append('--overwrite-tables')
  {% endif -%}
  command.extend(['--directory', os.path.join('{{ mydumper_backup_restore_path }}', database)])
  {% if mydumper_backup_verbose is defined -%}
  command.extend(['--verbose', {{ mydumper_backup_verbose | int }}])
  {% endif %}

  return_value = subprocess.call(map(str, command))
  if return_value != 0:
    sys.exit(return_value)

sys.exit(0)
